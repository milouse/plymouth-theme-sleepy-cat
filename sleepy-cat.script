/* begins teh kitteh */

// sets background colour to match images
Window.SetBackgroundTopColor    (0.08627450980392157, 0.08627450980392157, 0.08627450980392157);
Window.SetBackgroundBottomColor (0.08627450980392157, 0.08627450980392157, 0.08627450980392157);

loop = 0;
progress = 0;

progress_box.image = Image("progress-" + progress + ".png");
progress_box.sprite = Sprite();
// centers cat horizontally
progress_box.x = Window.GetWidth() / 2 - progress_box.image.GetWidth() / 2;
// centers cat vertically
progress_box.y = Window.GetHeight() / 2 - progress_box.image.GetHeight() / 2;
progress_box.sprite.SetPosition(progress_box.x, progress_box.y, 0);
progress_box.sprite.SetImage(progress_box.image);


/* function called by Plymouth at 50Hz */
fun refresh () {
    if (loop==0) {
        progress++;
        loop++;
    } else {
        loop = 0;
    }

    if (progress >= 110) progress = 0;

    new_progress_box.image = Image("progress-" + progress + ".png");
    progress_box.sprite.SetImage(new_progress_box.image);

    mode = Plymouth.GetMode();

    if (status == "normal" && mode == "boot" ) {
        // occurs on boot when all is normal in the world
        // cat will not be dimmed
        progress_box.sprite.SetOpacity(1);
    } else if (status != "normal" && mode == "boot" ) {
        // occurs on abnormal boot event such as a password request or unit failure
        // cat will be significantly dimmed
        progress_box.sprite.SetOpacity(0.25);
    } else {
        // occurs on shutdown, restart, suspend, resume or significant boot fault
        // cat will be dimmed slightly
        progress_box.sprite.SetOpacity(0.75);
    }
}

Plymouth.SetRefreshFunction(refresh);

/* function for dialogue */

status = "normal";

fun dialog_setup() {
    local.box;
    local.lock;
    local.entry;

    box.image = Image("box.png");
    lock.image = Image("lock.png");
    entry.image = Image("entry.png");

    box.sprite = Sprite(box.image);
    box.x = Window.GetWidth() / 2 - box.image.GetWidth() / 2;
    box.y = Window.GetHeight() / 2 - box.image.GetHeight() / 2;
    box.z = 10000;
    box.sprite.SetPosition(box.x, box.y, box.z);

    lock.sprite = Sprite(lock.image);
    lock.x = box.x + box.image.GetWidth() / 2 - (lock.image.GetWidth() + entry.image.GetWidth()) / 2;
    lock.y = box.y + box.image.GetHeight() / 2 - lock.image.GetHeight() / 2;
    lock.z = box.z + 1;
    lock.sprite.SetPosition(lock.x, lock.y, lock.z);

    entry.sprite = Sprite(entry.image);
    entry.x = lock.x + lock.image.GetWidth();
    entry.y = box.y + box.image.GetHeight() / 2 - entry.image.GetHeight() / 2;
    entry.z = box.z + 1;
    entry.sprite.SetPosition(entry.x, entry.y, entry.z);

    global.dialog.box = box;
    global.dialog.lock = lock;
    global.dialog.entry = entry;
    global.dialog.bullet_image = Image("bullet.png");
    dialog_opacity(1);
}

fun dialog_opacity(opacity) {
    dialog.box.sprite.SetOpacity(opacity);
    dialog.lock.sprite.SetOpacity(opacity);
    dialog.entry.sprite.SetOpacity(opacity);
    for (index = 0; dialog.bullet[index]; index++) {
        dialog.bullet[index].sprite.SetOpacity(opacity);
    }
}

fun display_normal_callback() {
    global.status = "normal";
    if (global.dialog) dialog_opacity(0);
}

fun display_password_callback (prompt, bullets) {
    global.status = "password";
    if (!global.dialog)
        dialog_setup();
    else
        dialog_opacity(1);

    for (index = 0; dialog.bullet[index] || index < bullets; index++) {
        if (!dialog.bullet[index]) {
            dialog.bullet[index].sprite = Sprite(dialog.bullet_image);
            dialog.bullet[index].x = dialog.entry.x + index * dialog.bullet_image.GetWidth();
            dialog.bullet[index].y = dialog.entry.y + dialog.entry.image.GetHeight() / 2 - dialog.bullet_image.GetHeight() / 2;
            dialog.bullet[index].z = dialog.entry.z + 1;
            dialog.bullet[index].sprite.SetPosition(dialog.bullet[index].x, dialog.bullet[index].y, dialog.bullet[index].z);
        }

        if (index < bullets)
            dialog.bullet[index].sprite.SetOpacity(1);
        else
            dialog.bullet[index].sprite.SetOpacity(0);
    }
}

Plymouth.SetDisplayNormalFunction(display_normal_callback);
Plymouth.SetDisplayPasswordFunction(display_password_callback);

/* function for quit */

fun quit_callback () {
    progress_box.sprite.SetOpacity(1);
}
Plymouth.SetQuitFunction(quit_callback);

/* function for message */

message_sprite = Sprite();
message_sprite.SetPosition(10, 10, 10000);

fun message_callback (text) {
    my_image = Image.Text(text, 1, 1, 1);
    message_sprite.SetImage(my_image);
}
Plymouth.SetMessageFunction(message_callback);
